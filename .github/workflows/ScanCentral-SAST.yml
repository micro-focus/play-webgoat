name: Fortify ScanCentral SAST Scan

on:
  workflow_dispatch:
  # Master or main branch that you want to trigger this workflow for
  push:
    branches: [main]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]
jobs:                                                  
  Fortify-SAST:
    # Use the appropriate runner for building your source code
    runs-on: ubuntu-latest
    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v2
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}
      # Java 11 or higher required by ScanCentral Client
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: 11

      - name: Download minimized Fortify SCA 22.1.1
        env:
          SFTP_SERVER: ${{secrets.SFTP_SERVER}}
          SFTP_UN: ${{secrets.SFTP_UN}}
          SFTP_PW: ${{secrets.SFTP_PW}}
          CLIENT_PK: ${{secrets.CLIENT_PK}}
          CLIENT_AUTH_TOKEN: ${{secrets.CLIENT_AUTH_TOKEN}}
        run: |
          sshpass -p "$SFTP_PW" sftp -oHostKeyAlgorithms=+ssh-dss -oStrictHostKeyChecking=no -P 2222 $SFTP_UN@$SFTP_SERVER:/22.1/SCA/sca_linux_min.zip
          mkdir ~/fortify
          unzip -q -d ~/fortify/sca sca_linux_min.zip
          echo "$HOME/fortify/sca/bin" >> $GITHUB_PATH
          ln -s $JAVA_HOME ~/fortify/sca/jre
          chmod +x $JAVA_HOME/lib/server/libjvm.so
          sed -ir "s/^[#]*\s*${CLIENT_PK}=.*/$CLIENT_PK=$CLIENT_AUTH_TOKEN/" $HOME/fortify/sca/Core/config/client.properties

      - name: Install Lightbend and Fortify licenses
        env:
          LIGHTBEND_LICENSE: ${{secrets.LIGHTBEND_LICENSE}}
          FORTIFY_LICENSE: ${{secrets.FORTIFY_LICENSE}}
        run: |
          mkdir -p ~/.lightbend
          echo "$LIGHTBEND_LICENSE" > ~/.lightbend/license
          echo "$FORTIFY_LICENSE" > $HOME/fortify/sca/fortify.license
      
      - name: Build and translate
        run: |
          rm -rf ~/.fortify/sca22.1/build/
          sbt clean compile

      ### Run Fortify ScanCentral Client ###
      #   Update BUILD_OPTS based on the ScanCentral Client documentation and your project's included tech stack(s).
      #   ScanCentral Client will download dependencies for maven, gradle and msbuild projects.
      #   For other build tools, add your build commands to the workflow to download necessary dependencies and prepare according to Fortify SCA documentation.
      - name: Request Remote ScanCentral SAST Scan
        if: success()
        run: scancentral -url $URL start -b $BUILD_ID -upload -versionid $VERSION_ID -uptoken $TOKEN -scan
        env:                                            
          URL: ${{ secrets.SCANCENTRAL_URL }}
          BUILD_ID: "play-webgoat"
          TOKEN: ${{ secrets.SSC_CI_TOKEN }}
          VERSION_ID: ${{ secrets.SSC_VERSION_ID }}

      ### Archive ScanCentral Client logs on failure ###
      - name: Save ScanCentral Logs
        uses: actions/upload-artifact@v2                
        if: failure()
        with:
           name: scancentral-logs
           path: ~/.fortify/scancentral-22.1.0/log

      - name: Check Remote Scan Status
        if: success()
        env:
          SSC_URL: ${{secrets.SSC_URL}}
          TOKEN: ${{secrets.SSC_CI_TOKEN}}
        run: |
          FORTIFYTOKEN=$(echo -n $TOKEN | base64)
          JOB_TOKEN="$(grep -R "Submitted job and received token" ~/.fortify/scancentral* | tail -1 | grep -E -o '[-0-9a-z]{36}$')"
          POLL_PERIOD="5s"
          while [ -z "$RESPONSE" ] || [ -z "$(echo $RESPONSE | grep -oh '"responseCode":200')" ]
          do
            RESPONSE=$(curl -s -w '\n' ${SSC_URL}/api/v1/cloudjobs/$JOB_TOKEN -H 'Accept: application/json' -H 'Authorization: FortifyToken '"$FORTIFYTOKEN")
            echo RESPONSE=$RESPONSE
            if [ ! -z "$(echo $RESPONSE | grep -oh 'Access Denied. Unauthorized access')" ]; then
              echo "Access Denied. Unauthorized access. Token might be invalid. Exiting with error."
              exit 1
            fi
            sleep $POLL_PERIOD
          done
          PV_ID=$(echo $RESPONSE | grep -E -o '\"pvId\":[0-9]*' | grep -o '[0-9]*')
          echo PV_ID=$PV_ID
          JOB_STATE=$(echo $RESPONSE | grep -E -o '\"jobState\":\"[_A-Z]*\"' | grep -E -o '[_A-Z]{2,}')
          echo JOB_STATE=$JOB_STATE
          while [ "$JOB_STATE" = "PENDING" ] || [ "$JOB_STATE" = "SCAN_RUNNING" ] || [ "$JOB_STATE" = "UPLOAD_QUEUED" ]
          do
            sleep $POLL_PERIOD
            RESPONSE=$(curl -s -w '\n'  ${SSC_URL}/api/v1/cloudjobs/$JOB_TOKEN -H 'Accept: application/json' -H 'Authorization: FortifyToken '"$FORTIFYTOKEN")
            JOB_STATE=$(echo $RESPONSE | grep -E -o '\"jobState\":\"[_A-Z]*\"' | grep -E -o '[_A-Z]{2,}')
          done
          if [ ! "$JOB_STATE" = "UPLOAD_COMPLETED" ]
          then
            echo ScanCentral job completed but artifact upload either failed or canceled. Setting build status to failed.
            exit 1
          fi
          RESPONSE=$(curl -s -w '\n'  ${SSC_URL}/api/v1/projectVersions/$PV_ID/artifacts?limit=1 -H 'Accept: application/json' -H 'Authorization: FortifyToken '"$FORTIFYTOKEN")
          ARTIFACT_STATUS=$(echo $RESPONSE | grep -E -o '\"status\":\"[_A-Z]*\"' | grep -E -o '[_A-Z]{2,}')
          echo ARTIFACT_STATUS=$ARTIFACT_STATUS
          if [ "$ARTIFACT_STATUS" = "PROCESSING" ] || [ "$ARTIFACT_STATUS" = "SCHED_PROCESSING" ]
          then
            sleep $POLL_PERIOD
            RESPONSE=$(curl -s -w '\n'  ${SSC_URL}/api/v1/projectVersions/$PV_ID/artifacts?limit=1 -H 'Accept: application/json' -H 'Authorization: FortifyToken '"$FORTIFYTOKEN")
            ARTIFACT_STATUS=$(echo $RESPONSE | grep -E -o '\"status\":\"[_A-Z]*\"' | grep -E -o '[_A-Z]{2,}')
          fi
          if [ ! "$ARTIFACT_STATUS" = "PROCESS_COMPLETE" ]
          then
            echo The ScanCentral job completed but artifact upload failed processing.
            exit 1
          fi
          echo ARTIFACT_STATUS=$ARTIFACT_STATUS
          RESPONSE=$(curl -s -w '\n'  ${SSC_URL}/api/v1/projectVersions/$PV_ID/performanceIndicatorHistories/FortifySecurityRating -H  'Accept: application/json' -H  'Authorization: FortifyToken '"$FORTIFYTOKEN")
          echo PI RESPONSE=$RESPONSE
          RATING=$(echo $RESPONSE | grep -E -o '\"value\":[0-9]\.[0-9]' | cut -b 9)
          echo RATING=$RATING
          if [ "$RATING" -lt "3" ]
          then
            echo Critical or High severity issues detected.
            exit
          else
            echo No Critical or High severity issues detected.
            exit
          fi        

      # Pull SAST issues from Fortify SSC and generate GitHub-optimized SARIF output
      - name: Export Results
        uses: fortify/gha-export-vulnerabilities@v1
        if: success()
        with:
          ssc_base_url: ${{ secrets.SSC_URL }}
          ssc_auth_token: ${{ secrets.SSC_CI_TOKEN }}
          ssc_version_id: ${{ secrets.SSC_VERSION_ID }}
      
      # Import Fortify SAST results to GitHub Security Code Scanning
      - name: Import Results
        uses: github/codeql-action/upload-sarif@v2
        if: success()
        with:
          sarif_file: ./gh-fortify-sast.sarif

      # Archive sarif file
      - name: Upload Results
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: sarif-files
          path: '**/*.sarif'
