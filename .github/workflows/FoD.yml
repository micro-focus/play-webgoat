name: Fortify on Demand SAST Scan (Scala)

on: 
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]

jobs:
  FoD-SAST-Scan:
    # Use the appropriate runner for building your source code. 
    # Use Windows runner for projects that use msbuild. Additional changes to RUN commands will be required.
    runs-on: ubuntu-latest

    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v2
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}      

      # Java is required to run ScanCentral Client, and may be required for your build
      # Java version to use depends on the Java version required to run your build (if any),
      # and the Java version supported by the ScanCentral Client version that you are running
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "11"
          
      - name: Install Lightbend license
        env:
          LIGHTBEND_LICENSE: ${{secrets.LIGHTBEND_LICENSE}}          
        run: |
          mkdir -p ~/.lightbend
          echo "$LIGHTBEND_LICENSE" > ~/.lightbend/license

      - name: Download minimized Fortify SCA 22.1.1
        env:
          SFTP_SERVER: ${{secrets.SFTP_SERVER}}
          SFTP_UN: ${{secrets.SFTP_UN}}
          SFTP_PW: ${{secrets.SFTP_PW}}
        run: |
          sshpass -p "$SFTP_PW" sftp -oHostKeyAlgorithms=+ssh-dss -oStrictHostKeyChecking=no -P 2222 $SFTP_UN@$SFTP_SERVER:/22.1/SCA/sca_linux_min.zip
          mkdir ~/fortify
          unzip -q -d ~/fortify/sca sca_linux_min.zip
          echo "$HOME/fortify/sca/bin" >> $GITHUB_PATH
          ln -s $JAVA_HOME ~/fortify/sca/jre
          # chmod +x $JAVA_HOME/lib/server/libjvm.so
      
      - name: Build and translate
        run: |
          rm -rf ~/.fortify/sca22.1/build/
          sbt clean compile

      - name: Create mobile build session
        run: |
          echo "Create mbs file..."
          sourceanalyzer -b $BUILD_ID -export-build-session $BUILD_ID.mbs
          echo "Zip mbs file..."
          zip -9mq package.zip ${BUILD_ID}.mbs
        env:
          BUILD_ID: "play-webgoat"

      # Start Fortify on Demand SAST scan. Be sure to set secrets/variables for your desired configuration.
      - name: Download Fortify on Demand Universal CI Tool
        uses: fortify/gha-setup-fod-uploader@v1
      - name: Perform SAST Scan
        run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -ac "$FOD_API_KEY" "$FOD_API_SECRET" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
        env:
          FOD_TENANT: ${{ secrets.FOD_TENANT }}  
          FOD_API_KEY: ${{ secrets.FOD_API_KEY }}
          FOD_API_SECRET: ${{ secrets.FOD_API_SECRET }}
          FOD_RELEASE_ID: ${{ secrets.FOD_RELEASE_ID }}
          FOD_URL: ${{ secrets.FOD_BASE_URL }}
          FOD_API_URL: ${{ secrets.FOD_API_URL }}
          FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
          FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'

      # Once scan completes, pull SAST issues from Fortify on Demand and generate SARIF output.
      - name: Export results to GitHub-optimized SARIF
        uses: fortify/gha-export-vulnerabilities@v1
        with:
          fod_base_url: ${{ secrets.FOD_BASE_URL }}
          fod_tenant: ${{ secrets.FOD_TENANT }}
          fod_client_id: ${{ secrets.FOD_API_KEY }}
          fod_client_secret: ${{ secrets.FOD_API_SECRET }}
          fod_release_id: ${{ secrets.FOD_RELEASE_ID }}
      
      # Import Fortify on Demand results to GitHub Security Code Scanning
      - name: Import results to GitHub Security Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./gh-fortify-sast.sarif

      # Attach SARIF file to workflow run
      - name: Attach SARIF file
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: sarif-files
          path: '**/*.sarif'

      # Attach package file to workflow run
      - name: Attach package file
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: package-file
          path: '**/package.zip'
